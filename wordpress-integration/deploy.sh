#!/bin/bash
# üöÄ Script de d√©ploiement automatique SIPORTS WordPress Integration
# Usage: ./deploy.sh [OPTIONS]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration par d√©faut
WORDPRESS_PATH="/var/www/html"
SIPORTS_PATH="/app"
BACKUP_DIR="/var/backups/siports"
PLUGIN_NAME="siports-integration"
LOG_FILE="/var/log/siports-deploy.log"

# Configuration base de donn√©es WordPress (√† modifier selon votre configuration)
WP_DB_HOST="localhost"
WP_DB_NAME="siportevent_db"
WP_DB_USER="siportevent_user"
WP_DB_PASSWORD=""  # √Ä remplir

# URLs
WORDPRESS_URL="https://siportevent.com"
SIPORTS_API_URL="https://react-router-upgrade.preview.emergentagent.com"

print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üöÄ SIPORTS WordPress Integration                            ‚ïë"
    echo "‚ïë                           Script de D√©ploiement                                ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log_message "INFO" "‚úÖ $1"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    log_message "ERROR" "‚ùå $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log_message "WARN" "‚ö†Ô∏è  $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log_message "INFO" "‚ÑπÔ∏è  $1"
}

check_requirements() {
    print_info "V√©rification des pr√©requis..."
    
    # V√©rifier que nous sommes root
    if [ "$EUID" -ne 0 ]; then
        print_error "Ce script doit √™tre ex√©cut√© en tant que root"
        exit 1
    fi
    
    # V√©rifier l'existence de WordPress
    if [ ! -f "$WORDPRESS_PATH/wp-config.php" ]; then
        print_error "WordPress non trouv√© dans $WORDPRESS_PATH"
        exit 1
    fi
    
    # V√©rifier l'existence de SIPORTS
    if [ ! -f "$SIPORTS_PATH/backend/server.py" ]; then
        print_error "SIPORTS backend non trouv√© dans $SIPORTS_PATH"
        exit 1
    fi
    
    # V√©rifier les commandes n√©cessaires
    for cmd in mysql wp php python3 pip npm; do
        if ! command -v $cmd &> /dev/null; then
            print_error "Commande manquante: $cmd"
            exit 1
        fi
    done
    
    print_success "Tous les pr√©requis sont satisfaits"
}

create_backup() {
    print_info "Cr√©ation des sauvegardes..."
    
    # Cr√©er le r√©pertoire de sauvegarde
    mkdir -p "$BACKUP_DIR"
    
    # Timestamp pour les sauvegardes
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    
    # Sauvegarde de la base WordPress
    if [ -n "$WP_DB_PASSWORD" ]; then
        print_info "Sauvegarde base de donn√©es WordPress..."
        mysqldump -h "$WP_DB_HOST" -u "$WP_DB_USER" -p"$WP_DB_PASSWORD" "$WP_DB_NAME" > "$BACKUP_DIR/wp_db_$timestamp.sql"
        print_success "Base WordPress sauvegard√©e"
    else
        print_warning "Mot de passe DB non fourni, sauvegarde DB ignor√©e"
    fi
    
    # Sauvegarde de la base SIPORTS
    if [ -f "$SIPORTS_PATH/backend/siports.db" ]; then
        cp "$SIPORTS_PATH/backend/siports.db" "$BACKUP_DIR/siports_db_$timestamp.db"
        print_success "Base SIPORTS sauvegard√©e"
    fi
    
    # Sauvegarde du dossier plugin existant
    if [ -d "$WORDPRESS_PATH/wp-content/plugins/$PLUGIN_NAME" ]; then
        tar -czf "$BACKUP_DIR/plugin_$timestamp.tar.gz" -C "$WORDPRESS_PATH/wp-content/plugins" "$PLUGIN_NAME"
        print_success "Plugin existant sauvegard√©"
    fi
    
    print_success "Toutes les sauvegardes cr√©√©es dans $BACKUP_DIR"
}

install_wordpress_plugin() {
    print_info "Installation du plugin WordPress..."
    
    local plugin_dir="$WORDPRESS_PATH/wp-content/plugins/$PLUGIN_NAME"
    
    # Cr√©er le r√©pertoire du plugin
    mkdir -p "$plugin_dir"
    mkdir -p "$plugin_dir/build/static/js"
    mkdir -p "$plugin_dir/build/static/css"
    
    # Copier les fichiers du plugin
    cp "$(dirname "$0")/siports-integration.php" "$plugin_dir/"
    cp "$(dirname "$0")/build/static/js/init.js" "$plugin_dir/build/static/js/"
    cp "$(dirname "$0")/build/static/css/main.css" "$plugin_dir/build/static/css/"
    
    # D√©finir les bonnes permissions
    chown -R www-data:www-data "$plugin_dir"
    chmod -R 755 "$plugin_dir"
    
    print_success "Plugin WordPress install√©"
}

configure_wordpress_plugin() {
    print_info "Configuration du plugin WordPress..."
    
    # Activer le plugin via WP-CLI
    cd "$WORDPRESS_PATH"
    wp plugin activate "$PLUGIN_NAME" --allow-root || print_warning "Impossible d'activer automatiquement le plugin"
    
    # Configurer les options du plugin
    wp option update "siports_api_url" "$SIPORTS_API_URL/api" --allow-root
    wp option update "siports_jwt_secret" "$(openssl rand -hex 32)" --allow-root
    wp option update "siports_auto_sync" "1" --allow-root
    
    print_success "Plugin WordPress configur√©"
}

install_backend_dependencies() {
    print_info "Installation des d√©pendances backend..."
    
    cd "$SIPORTS_PATH/backend"
    
    # Mettre √† jour requirements.txt
    if ! grep -q "mysql-connector-python" requirements.txt; then
        echo "mysql-connector-python==8.2.0" >> requirements.txt
    fi
    
    if ! grep -q "PyJWT" requirements.txt; then
        echo "PyJWT==2.8.0" >> requirements.txt
    fi
    
    # Installer les d√©pendances
    pip install -r requirements.txt
    
    print_success "D√©pendances backend install√©es"
}

configure_backend() {
    print_info "Configuration du backend SIPORTS..."
    
    # Copier les fichiers WordPress extensions
    cp "$(dirname "$0")/wordpress_config.py" "$SIPORTS_PATH/backend/"
    cp "$(dirname "$0")/wordpress_extensions.py" "$SIPORTS_PATH/backend/"
    
    # Cr√©er/mettre √† jour le fichier .env
    local env_file="$SIPORTS_PATH/backend/.env"
    
    # Sauvegarder le .env existant
    if [ -f "$env_file" ]; then
        cp "$env_file" "$env_file.backup.$(date +%s)"
    fi
    
    # Ajouter les variables WordPress √† .env
    cat >> "$env_file" << EOF

# WordPress Integration Settings
WP_DB_HOST=$WP_DB_HOST
WP_DB_NAME=$WP_DB_NAME
WP_DB_USER=$WP_DB_USER
WP_DB_PASSWORD=$WP_DB_PASSWORD
WP_TABLE_PREFIX=wp_
JWT_SECRET_KEY=$(openssl rand -hex 32)
WORDPRESS_URL=$WORDPRESS_URL
SIPORTS_API_URL=$SIPORTS_API_URL
LOG_LEVEL=INFO
EOF
    
    # Modifier server.py pour inclure l'int√©gration WordPress
    local server_file="$SIPORTS_PATH/backend/server.py"
    
    if ! grep -q "wordpress_extensions" "$server_file"; then
        # Ajouter l'import en haut du fichier
        sed -i '/^import/a from wordpress_extensions import init_wordpress_integration' "$server_file"
        
        # Ajouter l'initialisation apr√®s la cr√©ation de l'app
        sed -i '/^app = FastAPI/a # Initialize WordPress integration\ninit_wordpress_integration(app)' "$server_file"
        
        print_success "server.py modifi√© pour inclure WordPress"
    else
        print_info "server.py d√©j√† configur√© pour WordPress"
    fi
}

build_frontend() {
    print_info "Build du frontend React..."
    
    cd "$SIPORTS_PATH/frontend" || cd "$SIPORTS_PATH/src"
    
    # Install dependencies if needed
    if [ ! -d "node_modules" ]; then
        npm install
    fi
    
    # Build the project
    npm run build
    
    # Copy build files to WordPress plugin
    local plugin_build_dir="$WORDPRESS_PATH/wp-content/plugins/$PLUGIN_NAME/build"
    
    if [ -d "build" ]; then
        cp -r build/* "$plugin_build_dir/"
        print_success "Build React copi√© vers le plugin WordPress"
    elif [ -d "dist" ]; then
        cp -r dist/* "$plugin_build_dir/"
        print_success "Build React (Vite) copi√© vers le plugin WordPress"
    else
        print_warning "Aucun dossier build trouv√©, utilisation des fichiers par d√©faut"
    fi
}

restart_services() {
    print_info "Red√©marrage des services..."
    
    # Red√©marrer les services SIPORTS
    if command -v supervisorctl &> /dev/null; then
        supervisorctl restart all
        print_success "Services SIPORTS red√©marr√©s"
    elif command -v systemctl &> /dev/null; then
        systemctl restart siports-backend || print_warning "Service siports-backend non trouv√©"
        systemctl restart nginx || print_warning "Service nginx non trouv√©"
    fi
    
    # Red√©marrer PHP-FPM si disponible
    if command -v systemctl &> /dev/null; then
        systemctl restart php8.1-fpm || systemctl restart php-fpm || print_warning "PHP-FPM non red√©marr√©"
    fi
    
    # Vider le cache WordPress
    cd "$WORDPRESS_PATH"
    wp cache flush --allow-root || print_warning "Cache WordPress non vid√©"
    
    print_success "Services red√©marr√©s"
}

run_tests() {
    print_info "Ex√©cution des tests de validation..."
    
    # Test 1: V√©rifier que le plugin est activ√©
    cd "$WORDPRESS_PATH"
    if wp plugin is-active "$PLUGIN_NAME" --allow-root; then
        print_success "Plugin SIPORTS activ√©"
    else
        print_error "Plugin SIPORTS non activ√©"
        return 1
    fi
    
    # Test 2: V√©rifier l'API WordPress
    local wp_api_url="$WORDPRESS_URL/wp-json/siports/v1/status"
    if curl -s -f "$wp_api_url" > /dev/null; then
        print_success "API WordPress SIPORTS accessible"
    else
        print_warning "API WordPress SIPORTS non accessible (normal si WordPress non d√©marr√©)"
    fi
    
    # Test 3: V√©rifier l'API SIPORTS
    local siports_api_url="$SIPORTS_API_URL/api/sync/status"
    if curl -s -f "$siports_api_url" > /dev/null; then
        print_success "API SIPORTS accessible"
    else
        print_warning "API SIPORTS non accessible (v√©rifiez que le backend est d√©marr√©)"
    fi
    
    # Test 4: V√©rifier la base de donn√©es
    if [ -n "$WP_DB_PASSWORD" ]; then
        if mysql -h "$WP_DB_HOST" -u "$WP_DB_USER" -p"$WP_DB_PASSWORD" -e "USE $WP_DB_NAME; SHOW TABLES;" > /dev/null 2>&1; then
            print_success "Connexion base de donn√©es WordPress OK"
        else
            print_error "Connexion base de donn√©es WordPress √©chou√©e"
            return 1
        fi
    fi
    
    print_success "Tous les tests pass√©s"
}

show_summary() {
    print_header
    
    echo -e "${GREEN}üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS ! üéâ${NC}"
    echo
    echo -e "${BLUE}üìã R√âSUM√â DU D√âPLOIEMENT${NC}"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "‚Ä¢ Plugin WordPress install√© et activ√©"
    echo "‚Ä¢ Backend SIPORTS configur√© pour WordPress"
    echo "‚Ä¢ Frontend React int√©gr√©"
    echo "‚Ä¢ Base de donn√©es synchronis√©e"
    echo "‚Ä¢ Services red√©marr√©s"
    echo
    echo -e "${BLUE}üîó LIENS UTILES${NC}"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "‚Ä¢ WordPress Admin: $WORDPRESS_URL/wp-admin/"
    echo "‚Ä¢ Configuration SIPORTS: $WORDPRESS_URL/wp-admin/admin.php?page=siports-config"
    echo "‚Ä¢ Synchronisation: $WORDPRESS_URL/wp-admin/admin.php?page=siports-sync"
    echo "‚Ä¢ API SIPORTS: $SIPORTS_API_URL/api"
    echo
    echo -e "${BLUE}üìù PROCHAINES √âTAPES${NC}"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "1. Connectez-vous √† WordPress Admin"
    echo "2. Allez dans 'R√©glages ‚Üí SIPORTS Config'"
    echo "3. V√©rifiez la configuration"
    echo "4. Testez la synchronisation dans 'SIPORTS Sync'"
    echo "5. Ajoutez des shortcodes √† vos pages:"
    echo "   [siports_app component=\"admin\"]"
    echo "   [siports_app component=\"packages\"]"
    echo "   [siports_app component=\"matching\"]"
    echo
    echo -e "${BLUE}üìÇ FICHIERS DE LOG${NC}"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "‚Ä¢ D√©ploiement: $LOG_FILE"
    echo "‚Ä¢ WordPress: $WORDPRESS_PATH/wp-content/debug.log"
    echo "‚Ä¢ SIPORTS: $SIPORTS_PATH/logs/wordpress_integration.log"
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  N'OUBLIEZ PAS DE :${NC}"
    echo "‚Ä¢ Configurer votre mot de passe base de donn√©es dans ce script"
    echo "‚Ä¢ Tester l'authentification et la synchronisation"
    echo "‚Ä¢ Activer HTTPS en production"
    echo "‚Ä¢ Configurer les sauvegardes automatiques"
    echo
}

cleanup() {
    print_info "Nettoyage des fichiers temporaires..."
    
    # Nettoyer les anciens backups (garder les 5 derniers)
    if [ -d "$BACKUP_DIR" ]; then
        find "$BACKUP_DIR" -name "wp_db_*.sql" -type f | sort -r | tail -n +6 | xargs rm -f
        find "$BACKUP_DIR" -name "siports_db_*.db" -type f | sort -r | tail -n +6 | xargs rm -f
        find "$BACKUP_DIR" -name "plugin_*.tar.gz" -type f | sort -r | tail -n +6 | xargs rm -f
    fi
    
    print_success "Nettoyage termin√©"
}

show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Afficher cette aide"
    echo "  --skip-backup          Ignorer les sauvegardes"
    echo "  --skip-tests           Ignorer les tests"
    echo "  --wp-path PATH         Chemin WordPress (d√©faut: $WORDPRESS_PATH)"
    echo "  --siports-path PATH    Chemin SIPORTS (d√©faut: $SIPORTS_PATH)"
    echo "  --db-host HOST         Host base de donn√©es (d√©faut: $WP_DB_HOST)"
    echo "  --db-name NAME         Nom base de donn√©es (d√©faut: $WP_DB_NAME)"
    echo "  --db-user USER         Utilisateur base de donn√©es (d√©faut: $WP_DB_USER)"
    echo "  --db-password PASS     Mot de passe base de donn√©es"
    echo ""
    echo "Exemples:"
    echo "  $0                                    # D√©ploiement standard"
    echo "  $0 --skip-backup                     # Sans sauvegarde"
    echo "  $0 --db-password=monmotdepasse       # Avec mot de passe DB"
    echo ""
}

# Traitement des arguments
SKIP_BACKUP=false
SKIP_TESTS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        --skip-backup)
            SKIP_BACKUP=true
            shift
            ;;
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --wp-path)
            WORDPRESS_PATH="$2"
            shift 2
            ;;
        --siports-path)
            SIPORTS_PATH="$2"
            shift 2
            ;;
        --db-host)
            WP_DB_HOST="$2"
            shift 2
            ;;
        --db-name)
            WP_DB_NAME="$2"
            shift 2
            ;;
        --db-user)
            WP_DB_USER="$2"
            shift 2
            ;;
        --db-password)
            WP_DB_PASSWORD="$2"
            shift 2
            ;;
        *)
            print_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Script principal
main() {
    print_header
    
    # Cr√©er le dossier de logs
    mkdir -p "$(dirname "$LOG_FILE")"
    
    log_message "INFO" "üöÄ D√©but du d√©ploiement SIPORTS WordPress Integration"
    
    # V√©rifications
    check_requirements
    
    # Sauvegardes
    if [ "$SKIP_BACKUP" = false ]; then
        create_backup
    else
        print_warning "Sauvegardes ignor√©es"
    fi
    
    # Installation
    install_wordpress_plugin
    configure_wordpress_plugin
    install_backend_dependencies
    configure_backend
    build_frontend
    restart_services
    
    # Tests
    if [ "$SKIP_TESTS" = false ]; then
        run_tests
    else
        print_warning "Tests ignor√©s"
    fi
    
    # Nettoyage
    cleanup
    
    # R√©sum√©
    show_summary
    
    log_message "INFO" "‚úÖ D√©ploiement termin√© avec succ√®s"
}

# Gestion des erreurs
trap 'print_error "Erreur lors du d√©ploiement √† la ligne $LINENO"; exit 1' ERR

# Ex√©cution du script principal
main "$@"